{"version":3,"sources":["Components/WeatherInfo.js","Components/WeatherContainer.js","Components/App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","props","data","temp","humidity","desc","city","Fragment","className","WeatherContainer","useState","searchQuery","setSearchQuery","weatherData","setWeatherData","isValidZipCode","setIsValidZipCode","placeholder","onChange","event","zipCode","target","value","isValid","test","length","maxLength","onClick","fetch","then","response","json","main","toFixed","weather","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4QAkCeA,MA9Bf,SAAqBC,GAAQ,IAAD,EAEaA,EAAMC,KAApCC,EAFiB,EAEjBA,KAAMC,EAFW,EAEXA,SAAUC,EAFC,EAEDA,KAAMC,EAFL,EAEKA,KAC7B,OACI,kBAAC,IAAMC,SAAP,KACI,4BAAKF,GACL,6BAASG,UAAU,qBACf,yBAAKA,UAAU,sBACX,oCACA,2BAAIF,IAGR,yBAAKE,UAAU,sBACX,2CACA,2BAAIL,EAAK,0BAAMK,UAAU,kBAAzB,OAGJ,yBAAKA,UAAU,sBACX,wCACA,2BAAIJ,EAAJ,SC4ELK,MA/Ff,WAEI,IAFwB,EAGcC,mBAAS,IAHvB,mBAGjBC,EAHiB,KAGJC,EAHI,OAIcF,mBAAS,CAC3CP,KAAM,KACNC,SAAU,KACVC,KAAM,KACNC,KAAM,OARc,mBAIjBO,EAJiB,KAIJC,EAJI,OAYoBJ,oBAAS,GAZ7B,mBAYjBK,EAZiB,KAYDC,EAZC,KA+DxB,OACI,6BAASR,UAAW,qBAChB,4BAAQA,UAAU,kBACd,uCACA,6BAEI,2BACIS,YAAY,mBACZT,UAAW,eACXU,SAzDpB,SAA4BC,GACxB,IAAIC,EAASD,EAAME,OAAOC,MACtBC,EAaQ,WACKC,KAdYJ,GAC7BR,EAAeQ,GAEXG,GAAsB,KAAXH,GAAoC,IAAnBG,EAAQE,OACpCT,GAAkB,GAElBA,GAAkB,IAkDNU,UAAU,MAEd,4BAAQC,QAvCxB,WACSZ,GAAkC,KAAhBJ,EAKvBiB,MAAM,uDAAD,OAAwDjB,EAAxD,qBAxCO,qCAyCXkB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA3B,GAAI,OAAIY,EAAgB,CAC1BX,MAUoBA,EAVKD,EAAK8B,KAAK7B,MAWhC,KAACA,EAAO,QAAoB,IAAI8B,QAAQ,IAV3C7B,SAAUF,EAAK8B,KAAK5B,SACpBC,KAAMH,EAAKgC,QAAQ,GAAGF,KACtB1B,KAAMJ,EAAKiC,OAOnB,IAA4BhC,KAjBpBa,GAAkB,IAsCVR,UAAU,kBADV,YAIR,uBAAGA,UAAU,SAASO,EAAiB,GAAK,oBAC5C,6BAASP,UAAU,gBACO,OAArBK,EAAYV,KACT,mDACC,uBAAGK,UAAU,kBAAb,aAGD,kBAAC,EAAD,CAAaN,KAAMW,O,MC9ExBuB,MARf,WACE,OACE,6BAAS5B,UAAU,iBACjB,kBAAC,EAAD,QCKc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ecaf8ba.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Styles/Weather.css';\r\nimport WeatherContainer from './WeatherContainer';\r\n\r\nfunction WeatherInfo(props) {\r\n\r\n    const {temp, humidity, desc, city} = props.data;\r\n    return (\r\n        <React.Fragment>\r\n            <h3>{desc}</h3>\r\n            <section className=\"weather-data-flex\">\r\n                <div className=\"header-description\">\r\n                    <h4>City</h4>\r\n                    <p>{city}</p>\r\n                </div>\r\n\r\n                <div className=\"header-description\">\r\n                    <h4>Temperature</h4>  \r\n                    <p>{temp}<span className=\"degree-symbol\"></span> F</p>\r\n                </div>\r\n\r\n                <div className=\"header-description\">\r\n                    <h4>Humidity</h4>\r\n                    <p>{humidity}%</p>\r\n                </div>\r\n            </section>\r\n      \r\n          \r\n        \r\n        </React.Fragment>\r\n    );\r\n}    \r\n\r\n\r\nexport default WeatherInfo;","import React, {useState} from 'react'; // allows me to have state variables in functional components\r\nimport '../Styles/Weather.css'; // import of style sheet\r\nimport WeatherInfo from './WeatherInfo'; //importing the data displayed from api\r\n\r\nfunction WeatherContainer() {\r\n    //Api key variable is used when I am fetching the API. The purpose is to track my usage of the API\r\n    const API_KEY = 'c7c3ad8358cc48b3b530be00380a9763';\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const [weatherData, setWeatherData] = useState({\r\n        temp: null,\r\n        humidity: null,\r\n        desc: null,\r\n        city: null\r\n\r\n    });\r\n\r\n    const [isValidZipCode, setIsValidZipCode] = useState(true);\r\n\r\n    // this function is used to determine whether the user's input for the zip code is valid\r\n    function  updateSearchQuery(event){\r\n        let zipCode= event.target.value;\r\n        let isValid= validateZipCode(zipCode);\r\n        setSearchQuery(zipCode);\r\n        \r\n        if (isValid || zipCode=== \"\" || isValid.length === 5 ) {\r\n            setIsValidZipCode(true);\r\n        } else {\r\n            setIsValidZipCode(false);\r\n        }\r\n        \r\n    }\r\n\r\n    // Regex validation to make sure that the user's input is 5 numbers\r\n    function validateZipCode(zipcode) {\r\n        let regex = /[0-9]{5}/;\r\n            return regex.test(zipcode);\r\n    }\r\n\r\n    // if the zip code is valid, return the weather API\r\n\r\n    function getWeatherData() {\r\n        if (!isValidZipCode || searchQuery === \"\") {\r\n            setIsValidZipCode(false);\r\n            return;\r\n\r\n        }\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${searchQuery},us&appid=${API_KEY}`)\r\n        .then(response => response.json())\r\n        .then(data => setWeatherData ({\r\n            temp: convertToFarenheit(data.main.temp),  // this is how I was able to retreive the data. This code was given to me from the API's website\r\n            humidity: data.main.humidity,\r\n            desc: data.weather[0].main,\r\n            city: data.name\r\n        }));\r\n\r\n    }\r\n\r\n\r\n    // API returned the temparature in Celcius. This function converts the temperature to Farenheit\r\n    function convertToFarenheit(temp) {\r\n        return((temp - 273.15) *(9.0/5.0) +32).toFixed(0);\r\n    }\r\n    // It is returning the title \"Weather\", an input for the zip code, and the message \"no weather to display if the user has not searched with a valid zip code\"\r\n\r\n    // line 84 uses the ternary operator to decide whether or not to display the message if a valid zip code is not entered\r\n\r\n    // line 91 is rendering the Weather Info component that displays the weather data from the API\r\n    return (\r\n        <section className= \"weather-container\">\r\n            <header className=\"weather-header\">\r\n                <h3>Weather</h3>\r\n                <div>\r\n\r\n                    <input \r\n                        placeholder='Enter a Zip Code'\r\n                        className= \"search-input\"\r\n                        onChange={updateSearchQuery}\r\n                        maxLength='5'\r\n                    />\r\n                    <button onClick={getWeatherData}\r\n                    className=\"material-icons\">search</button>\r\n                </div>\r\n            </header>\r\n            <p className=\"error\">{isValidZipCode ? '' : 'Invalid Zip Code'}</p>\r\n            <section className=\"weather-info\">\r\n                {weatherData.temp === null ? (\r\n                    <p>No Weather to Display\r\n                     <i className=\"material-icons\">wb_sunny</i>       \r\n                    </p>\r\n                    \r\n                ) : <WeatherInfo data={weatherData} />\r\n            }\r\n            </section>\r\n        </section>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherContainer;\r\n","import React from 'react';\nimport WeatherContainer from './WeatherContainer';\nimport '../Styles/App.css';\n\nfunction App() {\n  return (\n    <section className=\"app-container\">\n      <WeatherContainer />\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}